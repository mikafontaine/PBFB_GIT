dim(Hapmap.D.bgl.tokeep)
Hapmap.D.bgl.tokeep <- na.omit(Hapmap.D.bgl[marker.tokeep2,])
dim(Hapmap.D.bgl.tokeep)
head(Hapmap.D.bgl.tokeep)
dim(Hapmap.D.bgl.tokeep)
print(dim(Hapmap.CEU_CHD_GIH_JPT_CHB_TSI.tokeep))
print(paste("chr",i,":",nrow(Hapmap.D.bgl.tokeep),"snp"))
print(paste("chr",i,":",nrow(marker.list.tokeep),"snp"))
dim(na.omit(Hapmap.CEU_CHD_GIH_JPT_CHB_TSI[marker.tokeep2,]))
i <- 22
path=paste("/Users/michaelfontaine/Doc/SoftGenet/PLINK/CEPH938_asia91_Phasing/3_Hapmap3_phased/chr",i,"/", sep="")#
out=paste("/Users/michaelfontaine/Doc/SoftGenet/PLINK/CEPH938_asia91_Phasing/2_Beagle_input_unphased_HAPMAP3/chr",i,"/", sep="")#
print(" Combining Unrelated")#
Hapmap.CEU <- read.table(paste(path,"hapmap3_r2_b36_fwd.consensus.qc.poly.chr",i,"_ceu.unr.phased.gz", sep=""), header=FALSE, sep=" ");row.names(Hapmap.CEU)<-Hapmap.CEU[,1]#
dim(Hapmap.CEU)#
Hapmap.CHD <- read.table(paste(path,"hapmap3_r2_b36_fwd.consensus.qc.poly.chr",i,"_chd.unr.phased.gz", sep=""), header=FALSE, sep=" ");row.names(Hapmap.CHD)<-Hapmap.CHD[,1]#
dim(Hapmap.CHD)#
Hapmap.GIH <- read.table(paste(path,"hapmap3_r2_b36_fwd.consensus.qc.poly.chr",i,"_gih.unr.phased.gz", sep=""), header=FALSE, sep=" ");row.names(Hapmap.GIH)<-Hapmap.GIH[,1]#
#		dim(Hapmap.GIH)#
Hapmap.JPT_CHB <- read.table(paste(path,"hapmap3_r2_b36_fwd.consensus.qc.poly.chr",i,"_jpt+chb.unr.phased.gz", sep=""), header=FALSE, sep=" ");row.names(Hapmap.JPT_CHB)<-Hapmap.JPT_CHB[,1]#
dim(Hapmap.JPT_CHB)#
Hapmap.TSI <- read.table(paste(path,"hapmap3_r2_b36_fwd.consensus.qc.poly.chr",i,"_tsi.unr.phased.gz", sep=""), header=FALSE, sep=" ");row.names(Hapmap.TSI)<-Hapmap.TSI[,1]#
dim(Hapmap.TSI)#
M <- c("I",rep("M", nrow(Hapmap.CEU)-1)); length(M)#
Hapmap.CEU_CHD_GIH_JPT_CHB_TSI <-cbind(M, Hapmap.CEU[,1], Hapmap.CEU[,3:(ncol(Hapmap.CEU)-1)], Hapmap.CHD[,3:(ncol(Hapmap.CHD)-1)],Hapmap.GIH[,3:(ncol(Hapmap.GIH)-1)],Hapmap.JPT_CHB[,3:(ncol(Hapmap.JPT_CHB)-1)], Hapmap.TSI[,3:(ncol(Hapmap.TSI)-1)])#
#
# SNP in our data to extract from hapmap#
marker.tokeep <- read.table(paste(out,"CEPH836_asia91.chr",i,".unphased.markers", sep=""), header=FALSE, sep=" "); row.names(marker.tokeep) <- marker.tokeep[,1]#
marker.tokeep1 <- row.names(marker.tokeep)#
marker.tokeep2 <- c("rsID", row.names(marker.tokeep))#
#head(marker.tokeep)#
#dim(na.omit(Hapmap.CEU_CHD_GIH_JPT_CHB_TSI[marker.tokeep2,]))#
Hapmap.CEU_CHD_GIH_JPT_CHB_TSI.tokeep <- na.omit(Hapmap.CEU_CHD_GIH_JPT_CHB_TSI[marker.tokeep2,])#
#
write.table(Hapmap.CEU_CHD_GIH_JPT_CHB_TSI.tokeep, paste(out,"hapmap3_r2_b36_fwd.consensus.qc.poly.chr",i,"_CEU_CHD_GIH_JPT_CHB_TSI.unr.phased.bgl", sep=""), col.names=FALSE, row.names=FALSE, quote=FALSE, sep=" "); print(dim(Hapmap.CEU_CHD_GIH_JPT_CHB_TSI.tokeep))#
#
#Marker list#
print("Marker list")#
temp.marker <- apply(Hapmap.CEU_CHD_GIH_JPT_CHB_TSI[2:nrow(Hapmap.CEU_CHD_GIH_JPT_CHB_TSI),3:ncol(Hapmap.CEU_CHD_GIH_JPT_CHB_TSI)],1,function(x)unique(x[!is.na(x)]))#
temp.marker <- data.frame(temp.marker)#
temp.marker <-t(temp.marker)#
#head(temp.marker)#
#count <- lapply(temp.marker,length); count[count>2]#
#temp.marker$rs1078890 #erreur sur le chr1!!!!#
#Hapmap.CEU_CHD_GIH_JPT_CHB_TSI["rs1078890",]#
marker.list <- data.frame(Hapmap.CEU[2:nrow(Hapmap.CEU),1],Hapmap.CEU[2:nrow(Hapmap.CEU),2],temp.marker)#
marker.list.tokeep <- na.omit(marker.list[marker.tokeep1, ])#
#
write.table(marker.list.tokeep, paste(out,"hapmap3_r2_b36_fwd.consensus.qc.poly.chr",i,"_CEU_CHD_GIH_JPT_CHB_TSI.unr.phased.markers", sep=""), col.names=FALSE, row.names=FALSE, quote=FALSE, sep=" "); print(dim(marker.list.tokeep))#
#
print("Combining DUO/TRIO")#
Hapmap.D <- read.table(paste(path,"hapmap3_r2_b36_fwd.consensus.qc.poly.chr",i,"_ceu.D.phased", sep=""), header=FALSE, sep=" ");row.names(Hapmap.D)<-Hapmap.D[,1]#
Hapmap.T <- read.table(paste(path,"hapmap3_r2_b36_fwd.consensus.qc.poly.chr",i,"_ceu.T.phased", sep=""), header=FALSE, sep=" ");row.names(Hapmap.T)<-Hapmap.T[,1]#
M <- c("I",rep("M", nrow(Hapmap.D)-1))#
Hapmap.D.bgl <- cbind(M, Hapmap.D[,1], Hapmap.D[,3:ncol(Hapmap.D)-1])#
Hapmap.T.bgl <- cbind(M, Hapmap.T[,1], Hapmap.T[,3:ncol(Hapmap.D)-1])#
Hapmap.D.bgl.tokeep <- na.omit(Hapmap.D.bgl[marker.tokeep2,])#
Hapmap.T.bgl.tokeep <- na.omit(Hapmap.T.bgl[marker.tokeep2,])#
#
write.table(Hapmap.D.bgl.tokeep, paste(out,"hapmap3_r2_b36_fwd.consensus.qc.poly.chr",i,"_ceu.D.phased.bgl", sep=""), col.names=FALSE, row.names=FALSE, quote=FALSE, sep=" ")#
write.table(Hapmap.T.bgl.tokeep, paste(out,"hapmap3_r2_b36_fwd.consensus.qc.poly.chr",i,"_ceu.T.phased.bgl", sep=""), col.names=FALSE, row.names=FALSE, quote=FALSE, sep=" ")#
print(paste("chr",i,":",nrow(marker.list.tokeep),"snp"))
for (i in 1:21){#
#
path=paste("/Users/michaelfontaine/Doc/SoftGenet/PLINK/CEPH938_asia91_Phasing/3_Hapmap3_phased/chr",i,"/", sep="")#
out=paste("/Users/michaelfontaine/Doc/SoftGenet/PLINK/CEPH938_asia91_Phasing/2_Beagle_input_unphased_HAPMAP3/chr",i,"/", sep="")#
print(" Combining Unrelated")#
Hapmap.CEU <- read.table(paste(path,"hapmap3_r2_b36_fwd.consensus.qc.poly.chr",i,"_ceu.unr.phased.gz", sep=""), header=FALSE, sep=" ");row.names(Hapmap.CEU)<-Hapmap.CEU[,1]#
dim(Hapmap.CEU)#
Hapmap.CHD <- read.table(paste(path,"hapmap3_r2_b36_fwd.consensus.qc.poly.chr",i,"_chd.unr.phased.gz", sep=""), header=FALSE, sep=" ");row.names(Hapmap.CHD)<-Hapmap.CHD[,1]#
dim(Hapmap.CHD)#
Hapmap.GIH <- read.table(paste(path,"hapmap3_r2_b36_fwd.consensus.qc.poly.chr",i,"_gih.unr.phased.gz", sep=""), header=FALSE, sep=" ");row.names(Hapmap.GIH)<-Hapmap.GIH[,1]#
#		dim(Hapmap.GIH)#
Hapmap.JPT_CHB <- read.table(paste(path,"hapmap3_r2_b36_fwd.consensus.qc.poly.chr",i,"_jpt+chb.unr.phased.gz", sep=""), header=FALSE, sep=" ");row.names(Hapmap.JPT_CHB)<-Hapmap.JPT_CHB[,1]#
dim(Hapmap.JPT_CHB)#
Hapmap.TSI <- read.table(paste(path,"hapmap3_r2_b36_fwd.consensus.qc.poly.chr",i,"_tsi.unr.phased.gz", sep=""), header=FALSE, sep=" ");row.names(Hapmap.TSI)<-Hapmap.TSI[,1]#
dim(Hapmap.TSI)#
M <- c("I",rep("M", nrow(Hapmap.CEU)-1)); length(M)#
Hapmap.CEU_CHD_GIH_JPT_CHB_TSI <-cbind(M, Hapmap.CEU[,1], Hapmap.CEU[,3:(ncol(Hapmap.CEU)-1)], Hapmap.CHD[,3:(ncol(Hapmap.CHD)-1)],Hapmap.GIH[,3:(ncol(Hapmap.GIH)-1)],Hapmap.JPT_CHB[,3:(ncol(Hapmap.JPT_CHB)-1)], Hapmap.TSI[,3:(ncol(Hapmap.TSI)-1)])#
#
# SNP in our data to extract from hapmap#
marker.tokeep <- read.table(paste(out,"CEPH836_asia91.chr",i,".unphased.markers", sep=""), header=FALSE, sep=" "); row.names(marker.tokeep) <- marker.tokeep[,1]#
marker.tokeep1 <- row.names(marker.tokeep)#
marker.tokeep2 <- c("rsID", row.names(marker.tokeep))#
#head(marker.tokeep)#
#dim(na.omit(Hapmap.CEU_CHD_GIH_JPT_CHB_TSI[marker.tokeep2,]))#
Hapmap.CEU_CHD_GIH_JPT_CHB_TSI.tokeep <- na.omit(Hapmap.CEU_CHD_GIH_JPT_CHB_TSI[marker.tokeep2,])#
#
write.table(Hapmap.CEU_CHD_GIH_JPT_CHB_TSI.tokeep, paste(out,"hapmap3_r2_b36_fwd.consensus.qc.poly.chr",i,"_CEU_CHD_GIH_JPT_CHB_TSI.unr.phased.bgl", sep=""), col.names=FALSE, row.names=FALSE, quote=FALSE, sep=" "); print(dim(Hapmap.CEU_CHD_GIH_JPT_CHB_TSI.tokeep))#
#
#Marker list#
print("Marker list")#
temp.marker <- apply(Hapmap.CEU_CHD_GIH_JPT_CHB_TSI[2:nrow(Hapmap.CEU_CHD_GIH_JPT_CHB_TSI),3:ncol(Hapmap.CEU_CHD_GIH_JPT_CHB_TSI)],1,function(x)unique(x[!is.na(x)]))#
temp.marker <- data.frame(temp.marker)#
temp.marker <-t(temp.marker)#
#head(temp.marker)#
#count <- lapply(temp.marker,length); count[count>2]#
#temp.marker$rs1078890 #erreur sur le chr1!!!!#
#Hapmap.CEU_CHD_GIH_JPT_CHB_TSI["rs1078890",]#
marker.list <- data.frame(Hapmap.CEU[2:nrow(Hapmap.CEU),1],Hapmap.CEU[2:nrow(Hapmap.CEU),2],temp.marker)#
marker.list.tokeep <- na.omit(marker.list[marker.tokeep1, ])#
#
write.table(marker.list.tokeep, paste(out,"hapmap3_r2_b36_fwd.consensus.qc.poly.chr",i,"_CEU_CHD_GIH_JPT_CHB_TSI.unr.phased.markers", sep=""), col.names=FALSE, row.names=FALSE, quote=FALSE, sep=" "); print(dim(marker.list.tokeep))#
#
print("Combining DUO/TRIO")#
Hapmap.D <- read.table(paste(path,"hapmap3_r2_b36_fwd.consensus.qc.poly.chr",i,"_ceu.D.phased", sep=""), header=FALSE, sep=" ");row.names(Hapmap.D)<-Hapmap.D[,1]#
Hapmap.T <- read.table(paste(path,"hapmap3_r2_b36_fwd.consensus.qc.poly.chr",i,"_ceu.T.phased", sep=""), header=FALSE, sep=" ");row.names(Hapmap.T)<-Hapmap.T[,1]#
M <- c("I",rep("M", nrow(Hapmap.D)-1))#
Hapmap.D.bgl <- cbind(M, Hapmap.D[,1], Hapmap.D[,3:ncol(Hapmap.D)-1])#
Hapmap.T.bgl <- cbind(M, Hapmap.T[,1], Hapmap.T[,3:ncol(Hapmap.D)-1])#
Hapmap.D.bgl.tokeep <- na.omit(Hapmap.D.bgl[marker.tokeep2,])#
Hapmap.T.bgl.tokeep <- na.omit(Hapmap.T.bgl[marker.tokeep2,])#
#
write.table(Hapmap.D.bgl.tokeep, paste(out,"hapmap3_r2_b36_fwd.consensus.qc.poly.chr",i,"_ceu.D.phased.bgl", sep=""), col.names=FALSE, row.names=FALSE, quote=FALSE, sep=" ")#
write.table(Hapmap.T.bgl.tokeep, paste(out,"hapmap3_r2_b36_fwd.consensus.qc.poly.chr",i,"_ceu.T.phased.bgl", sep=""), col.names=FALSE, row.names=FALSE, quote=FALSE, sep=" ")#
print(paste("chr",i,":",nrow(marker.list.tokeep),"snp"))#
}
HGDP938_Asia91.pheno <- read.table("/Users/michaelfontaine/Doc/SoftGenet/PLINK/CEPH938_asia91_Auto/HGDP938_Asia91.pedind", header=TRUE)
head(HGDP938_Asia91.pheno)
HGDP938_Asia91.pheno <- read.table("/Users/michaelfontaine/Doc/SoftGenet/PLINK/CEPH938_asia91_Auto/HGDP938_Asia91.pedind", header=FALSE)
head(HGDP938_Asia91.pheno)
HGDP945_Asia91.used <- read.table("/Users/michaelfontaine/MNHN:ESE-HumanGenetics/Asia_600k_SNP_data_results/données/HGDP-CEPH _650k_SNP_Data/HGDP945_ASIA91_USED.txt", header=TRUE, sep="\t")
dim(HGDP945_Asia91.used); head(HGDP945_Asia91.used)
row.names(HGDP945_Asia91.used) <- HGDP945_Asia91.used[,2]
HGDP938_Asia91.fam <- read.table("/Users/michaelfontaine/Doc/SoftGenet/PLINK/CEPH938_asia91_Auto/CEPH938_asia91_Auto_LDprun50_10_01.fam", header=FALSE)#
row.names(HGDP938_Asia91.fam)<-HGDP938_Asia91.fam[,1]#
head(HGDP938_Asia91.fam)
HGDP938_Asia91.pheno <- HGDP945_Asia91.used[row.names(HGDP938_Asia91.fam),]#
edit(HGDP938_Asia91.pheno)
table(HGDP938_Asia91.pheno$pop_order1)
HGDP938_Asia91.pedind <- cbind(HGDP938_Asia91.fam[,c(1:5)], as.character(HGDP938_Asia91.pheno[,7]))
edit(HGDP938_Asia91.pedind)
head(HGDP938_Asia91.pheno)
HGDP938_Asia91.fam <- read.table("/Users/michaelfontaine/Doc/SoftGenet/PLINK/CEPH938_asia91_Auto/CEPH938_asia91_Auto_LDprun50_10_01.fam", header=FALSE)#
row.names(HGDP938_Asia91.fam)<-HGDP938_Asia91.fam[,1]#
head(HGDP938_Asia91.fam)#
#
HGDP938_Asia91.pheno <- HGDP945_Asia91.used[row.names(HGDP938_Asia91.fam),]#
edit(HGDP938_Asia91.pheno)
head(HGDP938_Asia91.pheno); dim(HGDP938_Asia91.pheno) #1029x10| c10 "PopGroups" gives the continent
table(HGDP938_Asia91.pheno$PopGroups)
getwd()
library (adegenet)
??adegenet
library(adegenet)
merge.SNPgen.infoill <- ?merge(geno95_NewAn, snp.info.illumina, by.x="SNPID", by.y="NAME", all.x=TRUE)
?gsub
library(adegenet)
help(adegenet)
data(eHGDP)
eHGDP
eHGDP@ind.names
eHGDP
eHGDP@other
write.table(eHGDP@other, file="/Users/michaelfontaine/MNHN:ESE-HumanGenetics/Asia_600k_SNP_data_results/données/HGDP-CEPH _650k_SNP_Data/HGDP_data_original/HGDP_popinfo.csv", sep=";", quote=FALSE,row.names=FALSE)
eHGDP@other
library(maps)
map("world")
points(eHGDP@other$Longitude, eHGDP@other$Latitude, pch=16, col="red")
map("world")
points(eHGDP@other$Longitude, eHGDP@other$Latitude, pch=16, col="red")
eHGDP@other$Longitude
eHGDP@other$popInfo$Longitude
points(eHGDP@other$popInfo$Longitude, eHGDP@other$popInfo$Latitude, pch=16, col="red")
map("world")
points(eHGDP@other$popInfo$Longitude, eHGDP@other$popInfo$Latitude, pch=16, col="red")
map("world", fill=TRUE)
map("world", fill=TRUE, col="grey")
points(eHGDP@other$popInfo$Longitude, eHGDP@other$popInfo$Latitude, pch=16, col="red")
load required packages#
#
library(IDPmisc)#
library(SwissAir) # data for the example#
#
## prepare the data#
#
sapply(AirQual,function(x) sum(is.na(x)))#
cbind(#
min = sapply(AirQual[,-1], min, na.rm=TRUE),#
median = sapply(AirQual[,-1], median, na.rm=TRUE),#
max = sapply(AirQual[,-1], max, na.rm=TRUE)#
)#
#
## draw graph#
#
ilagplot(#
AirQual[,c("ad.O3")], set.lags = 1:4,#
ztrans=function(x){x[x<1] <- 1; log2(x)*10},#
mar = c(1.75,1.75,1.75,0), mgp = c(2,0.3,0)#
)
Ox <- AirQual[,c("ad.O3","lu.O3","sz.O3")] +#
AirQual[,c("ad.NOx","lu.NOx","sz.NOx")] -#
AirQual[,c("ad.NO","lu.NO","sz.NO")]#
names(Ox) <- c("ad","lu","sz")#
#
## draw graph#
#
ipairs(Ox, ztransf = function(x){x[x<1] <- 1; log2(x)})
?ilagplot()
x <-  rnorm(10000)#
y <- atan(rnorm(10000, 0))#
iplot(x, y)#
iplot(x, pixs=2)
head(y)
head(x)
oma <- c(5,5,0,0)
iplot(iris[,1:2],pixs=4, oma=oma)
oma <- c(100,100,0,0)
iplot(iris[,1:2],pixs=4, oma=oma)
oma <- c(1,1,0,0)
iplot(iris[,1:2],pixs=4, oma=oma)
oma <- c(0.01,0.01,0,0)
iplot(iris[,1:2],pixs=4, oma=oma)
oma <- c(0.01,0.01,0.01,0.01)
iplot(iris[,1:2],pixs=4, oma=oma)
x <-  rnorm(10000)#
y <- atan(rnorm(10000, 0))#
iplot(x, y)#
iplot(x, pixs=2)
x <-  rnorm(10000)#
y <- atan(rnorm(10000, 0))#
iplot(x, y)#
iplot(x, pixs=1)
x <-  rnorm(10000)#
y <- atan(rnorm(10000, 0))#
iplot(x, y)#
iplot(x, pixs=3)
x <-  rnorm(10000)#
y <- atan(rnorm(10000, 0))#
iplot(x, y)#
iplot(x, pixs=2)
oma <- c(5,5,0,0)#
iplot(iris[,1:2],pixs=4, oma=oma)
iplot(iris[,"Petal.Width"], iris[,"Species"], pixs=4, oma=oma)
iplot(x=iris[,"Species"], y=iris[,"Petal.Width"], pixs=10,border=TRUE,#
xlab="Species",#
ylab="Petal Width",#
main="Iris Species and Petal Width", oma=oma)
iplot(iris$Species, iris$Petal.Width,pixs=3, minL.axis=10,#
oma=c(3,6,0,0), mgp=c(4, 1, 0),#
cex.axis=2, cex.lab=2, cex.main= 2, main="Larger fonts")
prepare the data#
#
Ox <- AirQual[,c("ad.O3","lu.O3","sz.O3")] +#
AirQual[,c("ad.NOx","lu.NOx","sz.NOx")] -#
AirQual[,c("ad.NO","lu.NO","sz.NO")]#
names(Ox) <- c("ad","lu","sz")
if(require(SwissAir)) {#
data(AirQual)#
#
## low correlation#
ilagplot(AirQual[,c("ad.O3")],set.lags = 1:9,#
ztransf=function(x){x[x<1] <- 1; log2(x)})#
#
## high correlation#
Ox <- AirQual[,c("ad.O3","lu.O3","sz.O3")]+#
AirQual[,c("ad.NOx","lu.NOx","sz.NOx")]-#
AirQual[,c("ad.NO","lu.NO","sz.NO")]#
names(Ox) <- c("ad","lu","sz")#
ilagplot(Ox$ad,set.lags = 1:9,#
ztransf=function(x){x[x<1] <- 1; log2(x)})#
#
## cf. ?AirQual for the explanation of the physical#
## and chemical background#
} else print("Package SwissAir is not available")
head(Ox)
if(require(SwissAir)) {#
data(AirQual)#
#
## low correlation#
ilagplot(AirQual[,c("ad.O3")],set.lags = 1:9,#
ztransf=function(x){x[x<1] <- 1; log2(x)})#
#
## high correlation#
Ox <- AirQual[,c("ad.O3","lu.O3","sz.O3")]+#
AirQual[,c("ad.NOx","lu.NOx","sz.NOx")]-#
AirQual[,c("ad.NO","lu.NO","sz.NO")]#
names(Ox) <- c("ad","lu","sz")#
ilagplot(Ox$ad,set.lags = 1:9,#
ztransf=function(x){x[x<1] <- 1; log2(x)})#
#
## cf. ?AirQual for the explanation of the physical#
## and chemical background#
} else print("Package SwissAir is not available")
ilagplot(Ox$ad,set.lags = 1:9,#
ztransf=function(x){x[x<1] <- 1; log2(x)})
plot.default(iris$Species, iris$Petal.Width, xlim=c(0.5,3.5),#
type="n", axes=FALSE)#
axis(1, at=1:3, labels=levels(iris$Species))#
axis(2)#
Image(iris$Species, iris$Petal.Width, pixs=3)
x <- rnorm(10000)#
y <- rnorm(10000, 10)#
plot(x+y, y, type="n")#
Image(x+y, y)#
abline(a=0, b=1)
iplot(x+y, y, legend=FALSE, oma=c(5, 4, 4, 2) + 0.1)#
abline(a=0, b=1)
x <- rnorm(10000)#
y <- rnorm(10000, 10)#
plot(x+y, y, type="n")#
Image(x+y, y)#
abline(a=0, b=1)
jet.colors <-#
colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
"#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
filled.contour(volcano, color = jet.colors, asp = 1)
space="Lab" helps when colors don't form a natural sequence#
m <- outer(1:20,1:20,function(x,y) sin(sqrt(x*y)/3))#
rgb.palette <- colorRampPalette(c("red", "orange", "blue"),#
space = "rgb")#
Lab.palette <- colorRampPalette(c("red", "orange", "blue"),#
space = "Lab")#
filled.contour(m, col = rgb.palette(20))#
filled.contour(m, col = Lab.palette(20))
Interpolating a 'sequential' ColorBrewer palette#
YlOrBr <- c("#FFFFD4", "#FED98E", "#FE9929", "#D95F0E", "#993404")#
filled.contour(volcano,#
color.palette = colorRampPalette(YlOrBr, space = "Lab"),#
asp = 1)#
filled.contour(volcano,#
color.palette = colorRampPalette(YlOrBr, space = "Lab",#
bias = 0.5),#
asp = 1)
filled.contour(volcano,#
color.palette =#
colorRampPalette(c("red", "white", "blue")),#
asp = 1)
filled.contour(volcano,#
color.palette =#
colorRampPalette(c("red", "white", "blue"),#
space = "Lab"),#
asp = 1)
Interpolating a 'sequential' ColorBrewer palette#
YlOrBr <- c("#FFFFD4", "#FED98E", "#FE9929", "#D95F0E", "#993404")#
filled.contour(volcano,#
color.palette = colorRampPalette(YlOrBr, space = "Lab"),#
asp = 1)
filled.contour(volcano,#
color.palette = colorRampPalette(YlOrBr, space = "Lab",#
bias = 0.5),#
asp = 1)
'jet.colors' is "as in Matlab"#
## (and hurting the eyes by over-saturation)#
jet.colors <-#
colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
"#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
filled.contour(volcano, color = jet.colors, asp = 1)
The above can be merged to#
iplot(x+y, y, legend=FALSE, oma=c(5, 4, 4, 2) + 0.1)#
abline(a=0, b=1)
The above can be merged to#
iplot(x+y, y, legend=FALSE, oma=c(5, 4, 4, 2) + 0.1, coloramp=jet)#
abline(a=0, b=1)
The above can be merged to#
iplot(x+y, y, legend=FALSE, oma=c(5, 4, 4, 2) + 0.1, coloramp=jet.colors)#
abline(a=0, b=1)
The above can be merged to#
iplot(x+y, y, legend=FALSE, oma=c(5, 4, 4, 2) + 0.1, colramp=jet.colors)#
abline(a=0, b=1)
IDPcolorRamp(10)#
#
## Default IDPcolorRamp in 21 colors#
n <- 21#
showColors(IDPcolorRamp(n),border=FALSE)#
#
## colorRamp optimized to return at equidistant indices the colors#
## light blue, light green, yellow, orange, red, dark violet#
## works fine with n > 7#
cInt <- data.frame(h = c(0.47, 0.28, 0.16, 0, 1, 0.8),#
s = c(0.31, 0.55, 0.7, 0.8, 0.8, 1),#
v = c(1, 1, 1, 1, 1, 0.5))#
#
fr <- c(0.15, 0.25, 0.45, 0.0)#
ii <- seq(1,n,length.out=6)
colors at equidistant indices#
showColors(IDPcolorRamp(n, colInt = cInt, fr =fr)[ii], border=FALSE)
Alternative ramp in 21 colors#
showColors(IDPcolorRamp(n, colInt = cInt, fr =fr), border=FALSE)
x <-  rnorm(10000)#
y <- atan(rnorm(10000, 0))#
iplot(x, y)#
iplot(x, pixs=2)
iplot(iris[,1:2],pixs=4, oma=oma)
iplot(iris[,1:2],pixs=2, oma=oma)
1^1.29
10^1.29
10^-3.64
10^4.16
library(SNPRelate)
library(SNPrelate)
library(SNPRelate)
?SNPRelates
?SNPRelate
?seq
?prcomp
library(adegenet)
?dist
?dist(trasnp_fun_mia.freq.maf0.01)
CalcD
library(evobiR)
CalcD
i=1
(alignment.matrix[3, i])
print(count)
full.site <-   full.site[0]
full.site <-   vector()
full.site
abba <- 0                                                                         #  set up my variables#
baba <- 0                                                                         #  set up my variables#
count <- 0                                                                        #  set up my variables#
full.site <-   vector()                                                           #  set up my variables#
for(i in 1:ncol(alignment.matrix)){                                               #  run through all sites#
if(!("-"  %in% (alignment.matrix[c(2,3,4,7), i]) || "n"  %in% (alignment.matrix[, i]))){  #  exclude sites with gaps "-" or "n"#
count <- count+1#
full.site <- append(full.site, i)#
}#
}#
print(count)#
length(full.site)
head(alignment.matrix[, full.site]
library(geneland)
library('geneland')
library(Geneland)
\
?geneland
??geneland
PlotTessellation
?boot.phylo
??boot.phylo
?nodelabels(boot)
??nodelabels(boot)
??nodelabels
tr <- read.tree(text = "((Homo,Pan),Gorilla);")#
plot(tr)#
nodelabels("7.3 Ma", 4, frame = "r", bg = "yellow", adj = 0)#
nodelabels("5.4 Ma", 5, frame = "c", bg = "tomato", font = 3)
library(ape)
tr <- read.tree(text = "((Homo,Pan),Gorilla);")#
plot(tr)#
nodelabels("7.3 Ma", 4, frame = "r", bg = "yellow", adj = 0)#
nodelabels("5.4 Ma", 5, frame = "c", bg = "tomato", font = 3)
tr <- read.tree(text = "((Homo,Pan),Gorilla);")#
plot(tr)#
nodelabels("7.3 Ma", 4, frame = "r", bg = "yellow", adj = 1)#
nodelabels("5.4 Ma", 5, frame = "c", bg = "tomato", font = 3)
tr <- read.tree(text = "((Homo,Pan),Gorilla);")#
plot(tr)#
nodelabels("7.3 Ma", 4, frame = "r", bg = "yellow", adj = -1)#
nodelabels("5.4 Ma", 5, frame = "c", bg = "tomato", font = 3)
tr <- read.tree(text = "((Homo,Pan),Gorilla);")#
plot(tr)#
nodelabels("7.3 Ma", 4, frame = "r", bg = "yellow", adj = -0.5)#
nodelabels("5.4 Ma", 5, frame = "c", bg = "tomato", font = 3)
tr <- read.tree(text = "((Homo,Pan),Gorilla);")#
plot(tr)#
nodelabels("7.3 Ma", 4, frame = "r", bg = "yellow", adj = -0.4)#
nodelabels("5.4 Ma", 5, frame = "c", bg = "tomato", font = 3)
tr <- read.tree(text = "((Homo,Pan),Gorilla);")#
plot(tr)#
nodelabels("7.3 Ma", 4, frame = "r", bg = "yellow", adj = 0.4)#
nodelabels("5.4 Ma", 5, frame = "c", bg = "tomato", font = 3)
tr <- read.tree(text = "((Homo,Pan),Gorilla);")#
plot(tr)#
nodelabels("7.3 Ma", 4, frame = "none", bg = "yellow", adj = 0.4)#
nodelabels("5.4 Ma", 5, frame = "c", bg = "tomato", font = 3)
tr <- read.tree(text = "((Homo,Pan),Gorilla);")#
plot(tr)#
nodelabels("7.3 Ma", 4, frame = "none", bg = "yellow", adj = 0.4)#
nodelabels("5.4 Ma", 5, frame = "none", bg = "tomato", font = 3)
boot.prop <- boot/5
install.packages("adegenet")
install.packages("adegenet")
Tt.genind
R.version.string
source("https://bioconductor.org/biocLite.R")
biocLite("ggtree")
setwd("~/Desktop/maps/")  # Define a specific path where you want to work
library(marmap)
exLong <- 5
setwd("/Users/michaelfontaine/Dropbox/FONTAINE_LAB/teaching/PracticalComputhingForBiologists/PBfB_GIT/ScriptMaps/")  # Define a specific path where you want to work
data <- read.table(file="MildiouEuro.txt", header=TRUE) # Import data, tab-delimited with a header
View(data)
View(data)
attach(data)  #use the variable names. if you don't do this, you will need to used the notation data$Lat
library(marmap)
exLong <- 5
xlim <- c(min(Long)-exLong,max(Long)+exLong)
ylim <- c(min(Lat)-exLong,max(Lat)+exLong)
europe <- getNOAA.bathy(lon1=xlim[1], lon2=xlim[2], lat1 = ylim[1], lat2 = ylim[2], resolution=4)
head(europe)
head(europe, 100)
summary(europe, 100)
save(europe)
save(europe, file="europeNOAA.Rdata")
rm(list=ls())
load(europeNOAA.Rdata)
load("europeNOAA.Rdata")
data <- read.table(file="MildiouEuro.txt", header=TRUE) # Import data, tab-delimited with a header
attach(data)  #use the variable names. if you don't do this, you will need to used the notation data$Lat
library(marmap)
# https://epante.wordpress.com/marmap/
# http://www.molecularecologist.com/2015/07/marmap/
#define the geographic range of the map
exLong <- 5
xlim <- c(min(Long)-exLong,max(Long)+exLong)
ylim <- c(min(Lat)-exLong,max(Lat)+exLong)
blues <- c("lightsteelblue4", "lightsteelblue3", "lightsteelblue2", "lightsteelblue1")
greys <- c(grey(0.6), grey(0.93), grey(0.99))
plot(europe, image = TRUE, land = TRUE, lwd = 0.1, bpal = list(c(0, max(europe), greys), c(min(europe), 0, blues)),xlim=xlim, ylim=ylim)
plot(europe, image = TRUE, land = TRUE, lwd = 0.1, bpal = list(c(0, max(europe), greys), c(min(europe), 0, blues)),xlim=xlim, ylim=ylim)
View(data)
