write.table(eHGDP@other, file="/Users/michaelfontaine/MNHN:ESE-HumanGenetics/Asia_600k_SNP_data_results/donneÃÅes/HGDP-CEPH _650k_SNP_Data/HGDP_data_original/HGDP_popinfo.csv", sep=";", quote=FALSE,row.names=FALSE)
eHGDP@other
library(maps)
map("world")
points(eHGDP@other$Longitude, eHGDP@other$Latitude, pch=16, col="red")
map("world")
points(eHGDP@other$Longitude, eHGDP@other$Latitude, pch=16, col="red")
eHGDP@other$Longitude
eHGDP@other$popInfo$Longitude
points(eHGDP@other$popInfo$Longitude, eHGDP@other$popInfo$Latitude, pch=16, col="red")
map("world")
points(eHGDP@other$popInfo$Longitude, eHGDP@other$popInfo$Latitude, pch=16, col="red")
map("world", fill=TRUE)
map("world", fill=TRUE, col="grey")
points(eHGDP@other$popInfo$Longitude, eHGDP@other$popInfo$Latitude, pch=16, col="red")
load required packages#
#
library(IDPmisc)#
library(SwissAir) # data for the example#
#
## prepare the data#
#
sapply(AirQual,function(x) sum(is.na(x)))#
cbind(#
min = sapply(AirQual[,-1], min, na.rm=TRUE),#
median = sapply(AirQual[,-1], median, na.rm=TRUE),#
max = sapply(AirQual[,-1], max, na.rm=TRUE)#
)#
#
## draw graph#
#
ilagplot(#
AirQual[,c("ad.O3")], set.lags = 1:4,#
ztrans=function(x){x[x<1] <- 1; log2(x)*10},#
mar = c(1.75,1.75,1.75,0), mgp = c(2,0.3,0)#
)
Ox <- AirQual[,c("ad.O3","lu.O3","sz.O3")] +#
AirQual[,c("ad.NOx","lu.NOx","sz.NOx")] -#
AirQual[,c("ad.NO","lu.NO","sz.NO")]#
names(Ox) <- c("ad","lu","sz")#
#
## draw graph#
#
ipairs(Ox, ztransf = function(x){x[x<1] <- 1; log2(x)})
?ilagplot()
x <-  rnorm(10000)#
y <- atan(rnorm(10000, 0))#
iplot(x, y)#
iplot(x, pixs=2)
head(y)
head(x)
oma <- c(5,5,0,0)
iplot(iris[,1:2],pixs=4, oma=oma)
oma <- c(100,100,0,0)
iplot(iris[,1:2],pixs=4, oma=oma)
oma <- c(1,1,0,0)
iplot(iris[,1:2],pixs=4, oma=oma)
oma <- c(0.01,0.01,0,0)
iplot(iris[,1:2],pixs=4, oma=oma)
oma <- c(0.01,0.01,0.01,0.01)
iplot(iris[,1:2],pixs=4, oma=oma)
x <-  rnorm(10000)#
y <- atan(rnorm(10000, 0))#
iplot(x, y)#
iplot(x, pixs=2)
x <-  rnorm(10000)#
y <- atan(rnorm(10000, 0))#
iplot(x, y)#
iplot(x, pixs=1)
x <-  rnorm(10000)#
y <- atan(rnorm(10000, 0))#
iplot(x, y)#
iplot(x, pixs=3)
x <-  rnorm(10000)#
y <- atan(rnorm(10000, 0))#
iplot(x, y)#
iplot(x, pixs=2)
oma <- c(5,5,0,0)#
iplot(iris[,1:2],pixs=4, oma=oma)
iplot(iris[,"Petal.Width"], iris[,"Species"], pixs=4, oma=oma)
iplot(x=iris[,"Species"], y=iris[,"Petal.Width"], pixs=10,border=TRUE,#
xlab="Species",#
ylab="Petal Width",#
main="Iris Species and Petal Width", oma=oma)
iplot(iris$Species, iris$Petal.Width,pixs=3, minL.axis=10,#
oma=c(3,6,0,0), mgp=c(4, 1, 0),#
cex.axis=2, cex.lab=2, cex.main= 2, main="Larger fonts")
prepare the data#
#
Ox <- AirQual[,c("ad.O3","lu.O3","sz.O3")] +#
AirQual[,c("ad.NOx","lu.NOx","sz.NOx")] -#
AirQual[,c("ad.NO","lu.NO","sz.NO")]#
names(Ox) <- c("ad","lu","sz")
if(require(SwissAir)) {#
data(AirQual)#
#
## low correlation#
ilagplot(AirQual[,c("ad.O3")],set.lags = 1:9,#
ztransf=function(x){x[x<1] <- 1; log2(x)})#
#
## high correlation#
Ox <- AirQual[,c("ad.O3","lu.O3","sz.O3")]+#
AirQual[,c("ad.NOx","lu.NOx","sz.NOx")]-#
AirQual[,c("ad.NO","lu.NO","sz.NO")]#
names(Ox) <- c("ad","lu","sz")#
ilagplot(Ox$ad,set.lags = 1:9,#
ztransf=function(x){x[x<1] <- 1; log2(x)})#
#
## cf. ?AirQual for the explanation of the physical#
## and chemical background#
} else print("Package SwissAir is not available")
head(Ox)
if(require(SwissAir)) {#
data(AirQual)#
#
## low correlation#
ilagplot(AirQual[,c("ad.O3")],set.lags = 1:9,#
ztransf=function(x){x[x<1] <- 1; log2(x)})#
#
## high correlation#
Ox <- AirQual[,c("ad.O3","lu.O3","sz.O3")]+#
AirQual[,c("ad.NOx","lu.NOx","sz.NOx")]-#
AirQual[,c("ad.NO","lu.NO","sz.NO")]#
names(Ox) <- c("ad","lu","sz")#
ilagplot(Ox$ad,set.lags = 1:9,#
ztransf=function(x){x[x<1] <- 1; log2(x)})#
#
## cf. ?AirQual for the explanation of the physical#
## and chemical background#
} else print("Package SwissAir is not available")
ilagplot(Ox$ad,set.lags = 1:9,#
ztransf=function(x){x[x<1] <- 1; log2(x)})
plot.default(iris$Species, iris$Petal.Width, xlim=c(0.5,3.5),#
type="n", axes=FALSE)#
axis(1, at=1:3, labels=levels(iris$Species))#
axis(2)#
Image(iris$Species, iris$Petal.Width, pixs=3)
x <- rnorm(10000)#
y <- rnorm(10000, 10)#
plot(x+y, y, type="n")#
Image(x+y, y)#
abline(a=0, b=1)
iplot(x+y, y, legend=FALSE, oma=c(5, 4, 4, 2) + 0.1)#
abline(a=0, b=1)
x <- rnorm(10000)#
y <- rnorm(10000, 10)#
plot(x+y, y, type="n")#
Image(x+y, y)#
abline(a=0, b=1)
jet.colors <-#
colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
"#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
filled.contour(volcano, color = jet.colors, asp = 1)
space="Lab" helps when colors don't form a natural sequence#
m <- outer(1:20,1:20,function(x,y) sin(sqrt(x*y)/3))#
rgb.palette <- colorRampPalette(c("red", "orange", "blue"),#
space = "rgb")#
Lab.palette <- colorRampPalette(c("red", "orange", "blue"),#
space = "Lab")#
filled.contour(m, col = rgb.palette(20))#
filled.contour(m, col = Lab.palette(20))
Interpolating a 'sequential' ColorBrewer palette#
YlOrBr <- c("#FFFFD4", "#FED98E", "#FE9929", "#D95F0E", "#993404")#
filled.contour(volcano,#
color.palette = colorRampPalette(YlOrBr, space = "Lab"),#
asp = 1)#
filled.contour(volcano,#
color.palette = colorRampPalette(YlOrBr, space = "Lab",#
bias = 0.5),#
asp = 1)
filled.contour(volcano,#
color.palette =#
colorRampPalette(c("red", "white", "blue")),#
asp = 1)
filled.contour(volcano,#
color.palette =#
colorRampPalette(c("red", "white", "blue"),#
space = "Lab"),#
asp = 1)
Interpolating a 'sequential' ColorBrewer palette#
YlOrBr <- c("#FFFFD4", "#FED98E", "#FE9929", "#D95F0E", "#993404")#
filled.contour(volcano,#
color.palette = colorRampPalette(YlOrBr, space = "Lab"),#
asp = 1)
filled.contour(volcano,#
color.palette = colorRampPalette(YlOrBr, space = "Lab",#
bias = 0.5),#
asp = 1)
'jet.colors' is "as in Matlab"#
## (and hurting the eyes by over-saturation)#
jet.colors <-#
colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
"#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
filled.contour(volcano, color = jet.colors, asp = 1)
The above can be merged to#
iplot(x+y, y, legend=FALSE, oma=c(5, 4, 4, 2) + 0.1)#
abline(a=0, b=1)
The above can be merged to#
iplot(x+y, y, legend=FALSE, oma=c(5, 4, 4, 2) + 0.1, coloramp=jet)#
abline(a=0, b=1)
The above can be merged to#
iplot(x+y, y, legend=FALSE, oma=c(5, 4, 4, 2) + 0.1, coloramp=jet.colors)#
abline(a=0, b=1)
The above can be merged to#
iplot(x+y, y, legend=FALSE, oma=c(5, 4, 4, 2) + 0.1, colramp=jet.colors)#
abline(a=0, b=1)
IDPcolorRamp(10)#
#
## Default IDPcolorRamp in 21 colors#
n <- 21#
showColors(IDPcolorRamp(n),border=FALSE)#
#
## colorRamp optimized to return at equidistant indices the colors#
## light blue, light green, yellow, orange, red, dark violet#
## works fine with n > 7#
cInt <- data.frame(h = c(0.47, 0.28, 0.16, 0, 1, 0.8),#
s = c(0.31, 0.55, 0.7, 0.8, 0.8, 1),#
v = c(1, 1, 1, 1, 1, 0.5))#
#
fr <- c(0.15, 0.25, 0.45, 0.0)#
ii <- seq(1,n,length.out=6)
colors at equidistant indices#
showColors(IDPcolorRamp(n, colInt = cInt, fr =fr)[ii], border=FALSE)
Alternative ramp in 21 colors#
showColors(IDPcolorRamp(n, colInt = cInt, fr =fr), border=FALSE)
x <-  rnorm(10000)#
y <- atan(rnorm(10000, 0))#
iplot(x, y)#
iplot(x, pixs=2)
iplot(iris[,1:2],pixs=4, oma=oma)
iplot(iris[,1:2],pixs=2, oma=oma)
1^1.29
10^1.29
10^-3.64
10^4.16
library(SNPRelate)
library(SNPrelate)
library(SNPRelate)
?SNPRelates
?SNPRelate
?seq
?prcomp
library(adegenet)
?dist
?dist(trasnp_fun_mia.freq.maf0.01)
CalcD
library(evobiR)
CalcD
i=1
(alignment.matrix[3, i])
print(count)
full.site <-   full.site[0]
full.site <-   vector()
full.site
abba <- 0                                                                         #  set up my variables#
baba <- 0                                                                         #  set up my variables#
count <- 0                                                                        #  set up my variables#
full.site <-   vector()                                                           #  set up my variables#
for(i in 1:ncol(alignment.matrix)){                                               #  run through all sites#
if(!("-"  %in% (alignment.matrix[c(2,3,4,7), i]) || "n"  %in% (alignment.matrix[, i]))){  #  exclude sites with gaps "-" or "n"#
count <- count+1#
full.site <- append(full.site, i)#
}#
}#
print(count)#
length(full.site)
head(alignment.matrix[, full.site]
library(geneland)
library('geneland')
library(Geneland)
\
?geneland
??geneland
PlotTessellation
?boot.phylo
??boot.phylo
?nodelabels(boot)
??nodelabels(boot)
??nodelabels
tr <- read.tree(text = "((Homo,Pan),Gorilla);")#
plot(tr)#
nodelabels("7.3 Ma", 4, frame = "r", bg = "yellow", adj = 0)#
nodelabels("5.4 Ma", 5, frame = "c", bg = "tomato", font = 3)
library(ape)
tr <- read.tree(text = "((Homo,Pan),Gorilla);")#
plot(tr)#
nodelabels("7.3 Ma", 4, frame = "r", bg = "yellow", adj = 0)#
nodelabels("5.4 Ma", 5, frame = "c", bg = "tomato", font = 3)
tr <- read.tree(text = "((Homo,Pan),Gorilla);")#
plot(tr)#
nodelabels("7.3 Ma", 4, frame = "r", bg = "yellow", adj = 1)#
nodelabels("5.4 Ma", 5, frame = "c", bg = "tomato", font = 3)
tr <- read.tree(text = "((Homo,Pan),Gorilla);")#
plot(tr)#
nodelabels("7.3 Ma", 4, frame = "r", bg = "yellow", adj = -1)#
nodelabels("5.4 Ma", 5, frame = "c", bg = "tomato", font = 3)
tr <- read.tree(text = "((Homo,Pan),Gorilla);")#
plot(tr)#
nodelabels("7.3 Ma", 4, frame = "r", bg = "yellow", adj = -0.5)#
nodelabels("5.4 Ma", 5, frame = "c", bg = "tomato", font = 3)
tr <- read.tree(text = "((Homo,Pan),Gorilla);")#
plot(tr)#
nodelabels("7.3 Ma", 4, frame = "r", bg = "yellow", adj = -0.4)#
nodelabels("5.4 Ma", 5, frame = "c", bg = "tomato", font = 3)
tr <- read.tree(text = "((Homo,Pan),Gorilla);")#
plot(tr)#
nodelabels("7.3 Ma", 4, frame = "r", bg = "yellow", adj = 0.4)#
nodelabels("5.4 Ma", 5, frame = "c", bg = "tomato", font = 3)
tr <- read.tree(text = "((Homo,Pan),Gorilla);")#
plot(tr)#
nodelabels("7.3 Ma", 4, frame = "none", bg = "yellow", adj = 0.4)#
nodelabels("5.4 Ma", 5, frame = "c", bg = "tomato", font = 3)
tr <- read.tree(text = "((Homo,Pan),Gorilla);")#
plot(tr)#
nodelabels("7.3 Ma", 4, frame = "none", bg = "yellow", adj = 0.4)#
nodelabels("5.4 Ma", 5, frame = "none", bg = "tomato", font = 3)
boot.prop <- boot/5
install.packages("adegenet")
install.packages("adegenet")
Tt.genind
R.version.string
source("https://bioconductor.org/biocLite.R")
biocLite("ggtree")
#setwd("~/Desktop/maps/")  # Define a specific path where you want to work
data <- read.table(file="MildiouEuro.txt", header=TRUE) # Import data, tab-delimited with a header
attach(data)  #use the variable names. if you don't do this, you will need to used the notation data$Lat
setwd("~/Desktop/maps/")  # Define a specific path where you want to work
data <- read.table(file="MildiouEuro.txt", header=TRUE) # Import data, tab-delimited with a header
attach(data)  #use the variable names. if you don't do this, you will need to used the notation data$Lat
library(marmap)
#define the geographic range of the map
exLong <- 5
xlim <- c(min(Long)-exLong,max(Long)+exLong)
ylim <- c(min(Lat)-exLong,max(Lat)+exLong)
europe <- getNOAA.bathy(lon1=xlim[1], lon2=xlim[2], lat1 = ylim[1], lat2 = ylim[2], resolution=4)
# Creating color palettes
blues <- c("lightsteelblue4", "lightsteelblue3",
"lightsteelblue2", "lightsteelblue1")
greys <- c(grey(0.6), grey(0.93), grey(0.99))
png('map_marmap.png')
plot(europe, image = TRUE, land = TRUE, lwd = 0.03,bpal = list(c(0, max(europe), greys), c(min(europe), 0, blues)),xlim=xlim, ylim=ylim)
# Add coastline
plot(europe, n = 1, lwd = 0.4, add = TRUE)
points(Long , Lat, pch = 21, col = "black",bg = "yellow", cex = 1.3)
#export pdf
dev.off()
pdf('map_marmap.pdf')
plot(europe, image = TRUE, land = TRUE, lwd = 0.03,bpal = list(c(0, max(europe), greys), c(min(europe), 0, blues)),xlim=xlim, ylim=ylim)
# Add coastline
plot(europe, n = 1, lwd = 0.4, add = TRUE)
points(Long , Lat, pch = 21, col = "black",bg = "yellow", cex = 1.3)
#export pdf
dev.off()
png('map_marmap.pdf',res = 300)
plot(europe, image = TRUE, land = TRUE, lwd = 0.03,bpal = list(c(0, max(europe), greys), c(min(europe), 0, blues)),xlim=xlim, ylim=ylim)
# Add coastline
plot(europe, n = 1, lwd = 0.4, add = TRUE)
points(Long , Lat, pch = 21, col = "black",bg = "yellow", cex = 1.3)
#export pdf
dev.off()
png('map_marmap.pdf', pointsize = 12)
plot(europe, image = TRUE, land = TRUE, lwd = 0.03,bpal = list(c(0, max(europe), greys), c(min(europe), 0, blues)),xlim=xlim, ylim=ylim)
# Add coastline
plot(europe, n = 1, lwd = 0.4, add = TRUE)
points(Long , Lat, pch = 21, col = "black",bg = "yellow", cex = 1.3)
#export pdf
dev.off()
png('map_marmap.pdf', pointsize = 20)
plot(europe, image = TRUE, land = TRUE, lwd = 0.03,bpal = list(c(0, max(europe), greys), c(min(europe), 0, blues)),xlim=xlim, ylim=ylim)
# Add coastline
plot(europe, n = 1, lwd = 0.4, add = TRUE)
points(Long , Lat, pch = 21, col = "black",bg = "yellow", cex = 1.3)
#export pdf
dev.off()
png('map_marmap.pdf', res = 100)
plot(europe, image = TRUE, land = TRUE, lwd = 0.03,bpal = list(c(0, max(europe), greys), c(min(europe), 0, blues)),xlim=xlim, ylim=ylim)
# Add coastline
plot(europe, n = 1, lwd = 0.4, add = TRUE)
points(Long , Lat, pch = 21, col = "black",bg = "yellow", cex = 1.3)
#export pdf
dev.off()
png('map_marmap.png', res = 200)
plot(europe, image = TRUE, land = TRUE, lwd = 0.03,bpal = list(c(0, max(europe), greys), c(min(europe), 0, blues)),xlim=xlim, ylim=ylim)
# Add coastline
plot(europe, n = 1, lwd = 0.4, add = TRUE)
points(Long , Lat, pch = 21, col = "black",bg = "yellow", cex = 1.3)
#export pdf
dev.off()
png('map_marmap.png', res = 10)
plot(europe, image = TRUE, land = TRUE, lwd = 0.03,bpal = list(c(0, max(europe), greys), c(min(europe), 0, blues)),xlim=xlim, ylim=ylim)
# Add coastline
plot(europe, n = 1, lwd = 0.4, add = TRUE)
points(Long , Lat, pch = 21, col = "black",bg = "yellow", cex = 1.3)
#export pdf
dev.off()
jpeg('map_marmap.jpg', quality = 10)
plot(europe, image = TRUE, land = TRUE, lwd = 0.03,bpal = list(c(0, max(europe), greys), c(min(europe), 0, blues)),xlim=xlim, ylim=ylim)
# Add coastline
plot(europe, n = 1, lwd = 0.4, add = TRUE)
points(Long , Lat, pch = 21, col = "black",bg = "yellow", cex = 1.3)
#export pdf
dev.off()
jpeg('map_marmap.jpg', quality = 100)
plot(europe, image = TRUE, land = TRUE, lwd = 0.03,bpal = list(c(0, max(europe), greys), c(min(europe), 0, blues)),xlim=xlim, ylim=ylim)
# Add coastline
plot(europe, n = 1, lwd = 0.4, add = TRUE)
points(Long , Lat, pch = 21, col = "black",bg = "yellow", cex = 1.3)
#export pdf
dev.off()
jpeg('map_marmap.jpg', quality = 500)
plot(europe, image = TRUE, land = TRUE, lwd = 0.03,bpal = list(c(0, max(europe), greys), c(min(europe), 0, blues)),xlim=xlim, ylim=ylim)
# Add coastline
plot(europe, n = 1, lwd = 0.4, add = TRUE)
points(Long , Lat, pch = 21, col = "black",bg = "yellow", cex = 1.3)
#export pdf
dev.off()
plot(europe, image = TRUE, land = TRUE, lwd = 0.03,bpal = list(c(0, max(europe), greys), c(min(europe), 0, blues)),xlim=xlim, ylim=ylim)
# Add coastline
plot(europe, n = 1, lwd = 0.4, add = TRUE)
points(Long , Lat, pch = 21, col = "black",bg = "yellow", cex = 1.3)
#export pdf
dev.copy2pdf(file="map_marmap.pdf")
dev.copy2pdf(file="map_marmap.pdf")
dev.copy2eps(file="map_marmap.eps")
plot(europe, image = TRUE, land = TRUE, lwd = 0,bpal = list(c(0, max(europe), greys), c(min(europe), 0, blues)),xlim=xlim, ylim=ylim)
plot(europe, n = 1, lwd = 0.4, add = TRUE)
points(Long , Lat, pch = 21, col = "black",bg = "yellow", cex = 1.3)
dev.copy2pdf(file="map_marmap.pdf")
plot(europe, image = TRUE, land = TRUE, bpal = list(c(0, max(europe), greys), c(min(europe), 0, blues)),xlim=xlim, ylim=ylim)
plot(europe, image = TRUE, land = TRUE, lwd = 0.03,bpal = list(c(0, max(europe), greys), c(min(europe), 0, blues)),xlim=xlim, ylim=ylim)
plot(europe, image = TRUE, land = TRUE, lwd = 0.3,bpal = list(c(0, max(europe), greys), c(min(europe), 0, blues)),xlim=xlim, ylim=ylim)
# Add coastline
plot(europe, image = TRUE, land = TRUE, lwd = 0,bpal = list(c(0, max(europe), greys), c(min(europe), 0, blues)),xlim=xlim, ylim=ylim)
# Add coastline
plot(europe, n = 1, lwd = 0.4, add = TRUE)
points(Long , Lat, pch = 21, col = "black",bg = "yellow", cex = 1.3)
#export pdf
dev.copy2pdf(file="map_marmap.pdf")
plot(europe, image = TRUE, land = TRUE, lwd = 0.003,bpal = list(c(0, max(europe), greys), c(min(europe), 0, blues)),xlim=xlim, ylim=ylim)
# Add coastline
plot(europe, n = 1, lwd = 0.4, add = TRUE)
points(Long , Lat, pch = 21, col = "black",bg = "yellow", cex = 1.3)
#export pdf
dev.copy2pdf(file="map_marmap.pdf")
plot(europe, image = TRUE, land = TRUE, lwd = 0.003,lty=2, bpal = list(c(0, max(europe), greys), c(min(europe), 0, blues)),xlim=xlim, ylim=ylim)
# Add coastline
plot(europe, n = 1, lwd = 0.4, add = TRUE)
points(Long , Lat, pch = 21, col = "black",bg = "yellow", cex = 1.3)
dev.copy2pdf(file="map_marmap.pdf")
#export pdf
plot(europe, image = TRUE, land = TRUE, lwd = 0.003, bpal = list(c(0, max(europe), greys), c(min(europe), 0, blues)),xlim=xlim, ylim=ylim)
plot(europe, image = TRUE, land = TRUE, lwd = 0.1, bpal = list(c(0, max(europe), greys), c(min(europe), 0, blues)),xlim=xlim, ylim=ylim)
# Add coastline
plot(europe, n = 1, lwd = 0.4, add = TRUE)
points(Long , Lat, pch = 21, col = "black",bg = "yellow", cex = 1.3)
#export pdf
dev.copy2pdf(file="map_marmap.pdf")
setwd("~/Desktop/maps/")  # Define a specific path where you want to work
data <- read.table(file="MildiouEuro.txt", header=TRUE) # Import data, tab-delimited with a header
attach(data)  #use the variable names. if you don't do this, you will need to used the notation data$Lat
library(marmap)
# https://epante.wordpress.com/marmap/
# http://www.molecularecologist.com/2015/07/marmap/
#define the geographic range of the map
exLong <- 5
xlim <- c(min(Long)-exLong,max(Long)+exLong)
ylim <- c(min(Lat)-exLong,max(Lat)+exLong)
europe <- getNOAA.bathy(lon1=xlim[1], lon2=xlim[2], lat1 = ylim[1], lat2 = ylim[2], resolution=4)
# Creating color palettes
# Create nice looking color palettes
blues <- c("lightsteelblue4", "lightsteelblue3", "lightsteelblue2", "lightsteelblue1")
greys <- c(grey(0.6), grey(0.93), grey(0.99))
plot(europe, image = TRUE, land = TRUE, lwd = 0.1, bpal = list(c(0, max(europe), greys), c(min(europe), 0, blues)),xlim=xlim, ylim=ylim)
# Add coastline
plot(europe, n = 1, lwd = 0.1, add = TRUE)
points(Long , Lat, pch = 21, col = "black",bg = "yellow", cex = 1.3)
#export pdf
?read.table
data <- read.table(file="MildiouEuro.txt", header=TRUE) # Import data, tab-delimited with a header
View(data)
View(data)
View(data)
View(data)
View(data)
head(data)
head(data$Lat)
attach(data)  #use the variable names. if you don't do this, you will need to used the notation data$Lat
library(maps)
library(mapdata)
library('rworldxtra') #Updated highres maps (http://www.naturalearthdata.com/downloads/10m-cultural-vectors/)
#define the geographic range of the map
exLong <- 5
xlim <- c(min(Long)-exLong,max(Long)+exLong)
ylim <- c(min(Lat)-exLong,max(Lat)+exLong)
# Plot the map
map('world', fill=TRUE,col="grey90", xlim=xlim, ylim=ylim)
points(Long , Lat, pch=16, col="red")
map('world', fill=TRUE,col="grey90", xlim=xlim, ylim=ylim)
#plot(countriesHigh, fill=TRUE,col="grey90", xlim=xlim, ylim=ylim) # for high resolution
points(Long , Lat, pch=16, col="red")
map.axes(xlab="Long", ylab="Lat")
library(marmap)
xlim
ylim
?getNOAA.bathy
europe <- getNOAA.bathy(lon1=xlim[1], lon2=xlim[2], lat1 = ylim[1], lat2 = ylim[2], resolution=4)
plot(europe, image = TRUE, land = TRUE, lwd = 0.1, bpal = list(c(0, max(europe), greys), c(min(europe), 0, blues)),xlim=xlim, ylim=ylim)
plot(europe, image = TRUE, land = TRUE, lwd = 0.1, bpal = list(c(0, max(europe), greys), c(min(europe), 0, blues)),xlim=xlim, ylim=ylim)
plot(europe, n = 1, lwd = 0.1, add = TRUE)
points(Long , Lat, pch = 21, col = "black",bg = "yellow", cex = 1.3)
map('world', fill=TRUE,col="grey90")
map.axes(xlab="Long", ylab="Lat")
